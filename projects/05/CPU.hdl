// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    //option Code
    Mux(a=false, b=true, sel=instruction[15], out=opCode);
    
    
    //Mux16 1st
    Mux16(b=OutputALU2, a[0..14]=instruction[0..14], a[15]=false, sel=instruction[15], out=OutputMux1);
    
    //A register
    Not(in=instruction[5], out=loadARegister1);
    And(a=loadARegister1, b=opCode, out=loadARegister2);
    Not(in=loadARegister2, out=loadARegister);
    ARegister(in=OutputMux1, load=loadARegister, out=OutputARegister1, out=OutputARegister2, out[0..14]=addressM);
    
    //Mux16 2nd
    And(a=instruction[12], b=opCode, out=sel2Mux);
    Mux16(a=OutputARegister1, b=inM, sel=sel2Mux, out=OutputMux2);
    
    //ALU
    Mux(a=true, b=instruction[11], sel=opCode, out=zx1);
    Mux(a=true, b=instruction[10], sel=opCode, out=nx1);
    Mux(a=false, b=instruction[9], sel=opCode, out=zy1);
    Mux(a=false, b=instruction[8], sel=opCode, out=ny1);
    Mux(a=false, b=instruction[7], sel=opCode, out=f1);
    Mux(a=false, b=instruction[6], sel=opCode, out=no1);
    ALU(y=OutputMux2, x=OutputDRegister, zx=zx1, nx=nx1, zy=zy1, ny=ny1, f=f1, no=no1, out=OutputALU1, out=OutputALU2, out=outM, zr=zr, ng=ng);
    
    //D Register
    And(a=instruction[4], b=opCode, out=loadDRegister);
    DRegister(in=OutputALU1, load=loadDRegister, out=OutputDRegister);
    
    
    //PC
    Or(a=zr, b=ng, out=ps1);
    Not(in=ps1, out=ps);
    And(a=zr, b=instruction[1], out=PCload1);
    And(a=ng, b=instruction[2], out=PCload2);
    And(a=ps, b=instruction[0], out=PCload3);
    Or(a=PCload1, b=PCload2, out=PCload4);
    Or(a=PCload3, b=PCload4, out=PCload5);
    Not(in=PCload, out=PCinc);
    And(a=PCload5, b=opCode, out=PCload);
    
    PC(in=OutputARegister2, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc, out[15]=false);
    
    //other
    And(a=true, b=opCode, out=writeMb);
    And(a=instruction[3], b=writeMb, out=writeM);
    
    
    
}